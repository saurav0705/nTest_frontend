{"version":3,"file":"static/webpack/static\\development\\pages\\questionWithAnswers.js.9395be8db04925dfdbad.hot-update.js","sources":["webpack:///./pages/questionWithAnswers.js"],"sourcesContent":["import React, { Component } from 'react'\r\nimport Layout from \"./Layout\";\r\nimport { urlOfImages } from \"./images\";\r\nimport fetch from 'isomorphic-fetch';\r\nimport ls from 'local-storage';\r\nclass QueryWithAns extends Component{\r\n    constructor()\r\n    {\r\n        super();\r\n        this.state = {\r\n            question :{},\r\n            answers : [],\r\n            loggedIn : false,\r\n            objId : '',\r\n            form:false,\r\n            quesbox:'',\r\n        }\r\n        this.handleChange = this.handleChange.bind(this)\r\n    }\r\n    handleChange (event) {\r\n        this.setState({ quesbox: event.target.value })\r\n      }\r\n     async componentDidMount() {\r\n         if(ls.get('loggedIn')){\r\n            await this.setState({'loggedIn':true});\r\n        }         \r\n            this.show();\r\n      }\r\n      async upvote(id)\r\n      {\r\n        const url = 'http://localhost:8000/answers/'+id+'/upvote'\r\n        try {\r\n          const response = await fetch(url, {\r\n            method: 'GET',\r\n            headers: { 'Content-Type': 'application/json' ,\r\n            \"Access-Control-Allow-Origin\":'*','Authorization':'bearer '+ls.get('token')},\r\n          }\r\n          )\r\n          if (response.ok) {\r\n            const data = await response.json()\r\n            console.log(\"data----------- \",data);\r\n          console.log(response);\r\n          this.componentDidMount();\r\n          //   await this.setState({\r\n          //       user:data.user\r\n          //   })\r\n          } else {\r\n            alert('unable to fetch')\r\n            \r\n          }\r\n        } catch (error) {\r\n          console.error(\r\n            'You have an error in your code or there are Network issues.',\r\n            error\r\n          )\r\n          throw new Error(error)\r\n        }\r\n        console.log('up----------------------',id);\r\n      }\r\n\r\n      async downvote(id)\r\n      {\r\n        const url = 'http://localhost:8000/answers/'+id+'/downvote'\r\n        try {\r\n          const response = await fetch(url, {\r\n            method: 'GET',\r\n            headers: { 'Content-Type': 'application/json' ,\r\n            \"Access-Control-Allow-Origin\":'*','Authorization':'bearer '+ls.get('token')},\r\n          }\r\n          )\r\n          if (response.ok) {\r\n            const data = await response.json()\r\n            console.log(\"data----------- \",data);\r\n          console.log(response);\r\n          this.componentDidMount();\r\n          //   await this.setState({\r\n          //       user:data.user\r\n          //   })\r\n          } else {\r\n            alert('unable to fetch')\r\n            \r\n          }\r\n        } catch (error) {\r\n          console.error(\r\n            'You have an error in your code or there are Network issues.',\r\n            error\r\n          )\r\n          throw new Error(error)\r\n        }\r\n        \r\n        console.log('down-----------------------',id);\r\n      }\r\n      async show(){\r\n        await fetch('http://localhost:8000/questions/'+ls.get('obj_id'))\r\n        .then(response => response.json())\r\n        .then((res)=>{\r\n            console.log('test---------------- ',res);\r\n            if(res.question){\r\n            this.setState({question : res.question})\r\n                if(this.state.question.answers){\r\n                    this.setState({answers : this.state.question.answers})\r\n                }}\r\n            this.setState({'objId':ls.get('obj_id')});\r\n            \r\n        })\r\n      }\r\n\r\n      async submitanswer(){\r\n        console.log('called');\r\n       \r\n        const url = 'http://localhost:8000/questions/'+this.state.objId+'/answer';\r\n        try {\r\n          const response = await fetch(url, {\r\n            method: 'POST',\r\n            headers: { 'Content-Type': 'application/json' ,\r\n            \"Access-Control-Allow-Origin\":'*','Authorization':'bearer '+ls.get('token')},\r\n            body: JSON.stringify({ answer:this.state.quesbox})\r\n          }\r\n          )\r\n          if (response.ok) {\r\n            const data = await response.json()\r\n            console.log(\"data----------- \",data);\r\n          console.log(response);\r\n          this.toggleBox();\r\n          this.componentDidMount();\r\n          //   await this.setState({\r\n          //       user:data.user\r\n          //   })\r\n          } else {\r\n            alert('unable to fetch')\r\n            \r\n          }\r\n        } catch (error) {\r\n          console.error(\r\n            'You have an error in your code or there are Network issues.',\r\n            error\r\n          )\r\n          throw new Error(error)\r\n        }\r\n    }\r\n    \r\n\r\n      renderAnswer(){\r\n        if(this.state.answers && this.state.answers.length>0){\r\n        return ( <div>{this.state.answers.map((answer)=>{ return(\r\n            <div className=\"flex justify-center bg-green-300 p-4 m-4\">\r\n        <div className=\"block md:flex justify-center w-full\">\r\n        <div><center>\r\n            <img src={urlOfImages.answer} className=\"h-6 mt-5\"/></center>\r\n        </div>\r\n        \r\n        <div className='p-1 w-auto text-4m md:text-2xl'>\r\n            <span className=\"ml-2\">\r\n           {answer.answer}\r\n           </span>\r\n           <div className=\"text-right text-gray-500\">-- {answer.author.name}</div>\r\n        </div>\r\n        <div className={this.state.loggedIn ? 'block p-6':'hidden p-6'}>\r\n        <button onClick={()=>this.upvote(answer._id)} className=\"bg-green-500 hover:bg-green-700 w-full text-white p-2 px-4 mt-1 rounded mr-4\" >Upvote {answer.upvote.length}</button> \r\n        \r\n        <button onClick={()=>this.downvote(answer._id)} className=\"bg-red-500 hover:bg-red-700 text-white w-full rounded px-4 p-2 mt-1 \">Downvote {answer.downvote.length}</button> \r\n        </div>\r\n        </div>\r\n        </div>)\r\n        })}</div> );}\r\n        else{\r\n            return (<div className=\"flex justify-center bg-green-300 p-4 m-4 text-2xl\">NO ONE ANSWERED IT YET</div>)\r\n        }\r\n        \r\n      };\r\n\r\n\r\n      toggleBox(){\r\n        this.setState({\r\n            form : !this.state.form\r\n        })\r\n      }\r\n\r\n    render(){\r\n    return(\r\n        <Layout>\r\n           <div className={this.state.form ? 'hidden':'block'}>\r\n            <div className=\"flex overflow-hidden\">\r\n                <div  className={this.state.loggedIn ? 'block':'hidden'}>\r\n                <div className=\"fixed top-10  left-3 md:relative md:w-1/6 p-6 -ml-6\">\r\n                    <div onClick={()=> this.toggleBox()} className=\"bg-blue-500 hover:bg-blue-700 w-full text-white font-bold p-1 px-4 -ml-3 md:py-2 md:px-4 rounded m-1 md:m-4\">\r\n                        <span className=\"w-full\"> Answer</span>\r\n                    </div>\r\n                    </div>\r\n                </div>\r\n            <div className=\"block text-center  border-gray-600 w-screen md:w-5/6\">\r\n                <center>\r\n            <div className=\"text-2l md:text-4xl bg-red-500 text-white p-8 my-4 mx-4 rounded hover:bg-red-600\" >\r\n                  <b>Q.</b>   {this.state.question.question}\r\n                  \r\n              </div>\r\n               \r\n                \r\n                <div className=\"text-2xl bg-green-500 p-8 text-white\">\r\n                    Answers\r\n                    {this.renderAnswer()}\r\n\r\n                </div>\r\n\r\n                </center>\r\n            </div>\r\n            \r\n            </div>\r\n            </div>\r\n            <div className={this.state.form ? 'block':'hidden'}>\r\n                <center>\r\n              <div className=\"max-w-sm rounded overflow-hidden shadow-lg mt-10 border\">\r\n \r\n  <div className='px-4 py-6'>\r\n    <div className=\"font-bold text-xl mb-2\">Write Your Answer Here</div>\r\n    \r\n    <textarea value={this.state.quesbox} onChange={this.handleChange} className=\"shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline\" id=\"username\" required placeholder=\"Enter Your question Here ...\" rows=\"6\"/>\r\n    <button className=\"bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded mt-4\" onClick={()=>this.submitanswer()}>\r\n  Submit Question\r\n</button>\r\n  </div>\r\n  \r\n</div>\r\n</center></div>\r\n        </Layout>\r\n        \r\n    )\r\n};\r\n}\r\n\r\nexport default QueryWithAns;"],"mappings":"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","sourceRoot":""}