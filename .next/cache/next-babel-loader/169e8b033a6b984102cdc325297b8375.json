{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Lenovo\\\\Desktop\\\\ntest\\\\next_tailwind\\\\pages\\\\questionspage.js\";\nvar __jsx = React.createElement;\nimport React, { Component } from 'react';\nimport Layout from \"./Layout\";\nimport { urlOfImages } from \"./images\";\nimport fetch from 'isomorphic-fetch';\nimport { Router } from 'next/router';\nimport ls from 'local-storage';\n\nclass Query extends Component {\n  constructor() {\n    super();\n    this.state = {\n      questionList: [],\n      answers: [],\n      questionBox: false,\n      quesbox: '',\n      query: ''\n    };\n    this.handleChange = this.handleChange.bind(this);\n  }\n\n  handleChange(event) {\n    this.setState({\n      quesbox: event.target.value\n    });\n  }\n\n  async componentDidMount() {\n    await fetch('http://localhost:8000/questions/').then(response => response.json()).then(res => {\n      this.setState({\n        questionList: [...res.questionList]\n      });\n    });\n  }\n\n  renderQuestion() {\n    return __jsx(React.Fragment, null, this.state.questionList.map(question => {\n      return __jsx(\"div\", {\n        className: \"text-4xl bg-red-500 text-white p-8 my-4 mx-4 rounded hover:bg-red-600\",\n        onClick: () => console.log(question._id),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 36\n        },\n        __self: this\n      }, __jsx(\"b\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 37\n        },\n        __self: this\n      }, \"Q.\"), \"   \", question.question);\n    }));\n  }\n\n  openQuestionDialog() {\n    this.setState({\n      questionBox: !this.state.questionBox\n    });\n  }\n\n  async submitquestion() {\n    console.log('called');\n    console.log(this.state.quesbox);\n    const url = 'http://localhost:8000/questions';\n\n    try {\n      const response = await fetch(url, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          \"Access-Control-Allow-Origin\": '*',\n          'Authorization': 'bearer ' + ls.get('token')\n        },\n        body: JSON.stringify({\n          question: this.state.quesbox\n        })\n      });\n\n      if (response.ok) {\n        const data = await response.json();\n        console.log(\"data----------- \", data);\n        console.log(response);\n        this.openQuestionDialog();\n        this.componentDidMount(); //   await this.setState({\n        //       user:data.user\n        //   })\n      } else {\n        alert('unable to fetch');\n      }\n    } catch (error) {\n      console.error('You have an error in your code or there are Network issues.', error);\n      throw new Error(error);\n    }\n  }\n\n  test() {\n    console.log('tetsing sucess ----------------- ', ls.get('query'));\n  }\n\n  render() {\n    this.test();\n    return __jsx(Layout, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 94\n      },\n      __self: this\n    }, __jsx(\"div\", {\n      className: this.state.questionBox ? 'hidden' : 'block',\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 95\n      },\n      __self: this\n    }, __jsx(\"div\", {\n      className: \"flex overflow-hidden\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 96\n      },\n      __self: this\n    }, __jsx(\"div\", {\n      className: \"fixed bottom-3 right-3 md:block  p-0 md:p-8\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 97\n      },\n      __self: this\n    }, __jsx(\"div\", {\n      className: \" w-full bg-red-300 hover:bg-red-700 text-white font-bold  mt-10 p-2  rounded \",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 98\n      },\n      __self: this\n    }, __jsx(\"img\", {\n      src: urlOfImages.question,\n      className: \"h-8 rounded-full inline-block\",\n      onClick: () => {\n        this.openQuestionDialog();\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 99\n      },\n      __self: this\n    }), __jsx(\"sapn\", {\n      className: \"hidden md:block \",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 99\n      },\n      __self: this\n    }, \" Ask A Question\"))), __jsx(\"div\", {\n      className: \"block text-center  border-gray-600 w-screen \",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 105\n      },\n      __self: this\n    }, this.renderQuestion()))), __jsx(\"div\", {\n      className: this.state.questionBox ? 'block' : 'hidden',\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 111\n      },\n      __self: this\n    }, __jsx(\"center\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 112\n      },\n      __self: this\n    }, __jsx(\"div\", {\n      className: \"max-w-sm rounded overflow-hidden shadow-lg mt-10 border\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 113\n      },\n      __self: this\n    }, __jsx(\"div\", {\n      className: \"px-4 py-6\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 115\n      },\n      __self: this\n    }, __jsx(\"div\", {\n      className: \"font-bold text-xl mb-2\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 116\n      },\n      __self: this\n    }, \"Write Your Question Here\"), __jsx(\"textarea\", {\n      value: this.state.quesbox,\n      onChange: this.handleChange,\n      className: \"shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline\",\n      id: \"username\",\n      required: true,\n      placeholder: \"Enter Your question Here ...\",\n      rows: \"6\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 118\n      },\n      __self: this\n    }), __jsx(\"button\", {\n      className: \"bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded mt-4\",\n      onClick: () => this.submitquestion(),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 119\n      },\n      __self: this\n    }, \"Submit Question\"))))));\n  }\n\n}\n\nexport default Query;","map":{"version":3,"sources":["C:/Users/Lenovo/Desktop/ntest/next_tailwind/pages/questionspage.js"],"names":["React","Component","Layout","urlOfImages","fetch","Router","ls","Query","constructor","state","questionList","answers","questionBox","quesbox","query","handleChange","bind","event","setState","target","value","componentDidMount","then","response","json","res","renderQuestion","map","question","console","log","_id","openQuestionDialog","submitquestion","url","method","headers","get","body","JSON","stringify","ok","data","alert","error","Error","test","render"],"mappings":"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","sourcesContent":["import React, { Component } from 'react'\r\nimport Layout from \"./Layout\";\r\nimport { urlOfImages } from \"./images\";\r\nimport fetch from 'isomorphic-fetch';\r\nimport { Router } from 'next/router';\r\nimport ls from 'local-storage';\r\n\r\nclass Query extends Component{\r\n    constructor()\r\n    {\r\n        super();\r\n        this.state = {\r\n            questionList :[],\r\n            answers : [],\r\n            questionBox : false,\r\n            quesbox:'',\r\n            query:''\r\n        }\r\n        this.handleChange = this.handleChange.bind(this)\r\n    }\r\n    handleChange (event) {\r\n        this.setState({ quesbox: event.target.value })\r\n      }\r\n      async componentDidMount() {\r\n           await fetch('http://localhost:8000/questions/')\r\n            .then(response => response.json())\r\n            .then((res)=>{\r\n                this.setState( {questionList : [...res.questionList]});\r\n            })\r\n            \r\n      }\r\n      renderQuestion(){\r\n\r\n          return (<>\r\n              { this.state.questionList.map((question)=>{\r\n                   return <div className=\"text-4xl bg-red-500 text-white p-8 my-4 mx-4 rounded hover:bg-red-600\" onClick={() => console.log(question._id)}>\r\n                  <b>Q.</b>   {question.question}\r\n                  \r\n              </div>\r\n              })}\r\n          </>\r\n          );\r\n\r\n      };\r\n\r\n\r\n      openQuestionDialog(){\r\n          this.setState({\r\n              questionBox : !this.state.questionBox\r\n          })\r\n      };\r\n\r\n      async submitquestion(){\r\n          console.log('called');\r\n          console.log(this.state.quesbox);\r\n          const url = 'http://localhost:8000/questions'\r\n          try {\r\n            const response = await fetch(url, {\r\n              method: 'POST',\r\n              headers: { 'Content-Type': 'application/json' ,\r\n              \"Access-Control-Allow-Origin\":'*','Authorization':'bearer '+ls.get('token')},\r\n              body: JSON.stringify({ question:this.state.quesbox})\r\n            }\r\n            )\r\n            if (response.ok) {\r\n              const data = await response.json()\r\n              console.log(\"data----------- \",data);\r\n            console.log(response);\r\n            this.openQuestionDialog();\r\n            this.componentDidMount();\r\n            //   await this.setState({\r\n            //       user:data.user\r\n            //   })\r\n            } else {\r\n              alert('unable to fetch')\r\n              \r\n            }\r\n          } catch (error) {\r\n            console.error(\r\n              'You have an error in your code or there are Network issues.',\r\n              error\r\n            )\r\n            throw new Error(error)\r\n          }\r\n      }\r\n      \r\n      test(){\r\n        console.log('tetsing sucess ----------------- ',ls.get('query'));\r\n      }\r\n\r\n    render(){\r\n        this.test();\r\n    return(\r\n        <Layout>\r\n           <div className={this.state.questionBox ? 'hidden':'block'}>\r\n            <div className=\"flex overflow-hidden\">\r\n                <div className=\"fixed bottom-3 right-3 md:block  p-0 md:p-8\">\r\n                    <div className=\" w-full bg-red-300 hover:bg-red-700 text-white font-bold  mt-10 p-2  rounded \">\r\n                        <img src={urlOfImages.question} className=\"h-8 rounded-full inline-block\" onClick={()=>{this.openQuestionDialog()}}/><sapn className=\"hidden md:block \" > Ask A Question</sapn>\r\n                    </div>\r\n                    \r\n                    \r\n                </div>\r\n                \r\n            <div className=\"block text-center  border-gray-600 w-screen \">\r\n                \r\n                {this.renderQuestion()}\r\n              </div>\r\n              </div>  \r\n              </div>\r\n            <div className={this.state.questionBox ? 'block':'hidden'}>\r\n                <center>\r\n              <div className=\"max-w-sm rounded overflow-hidden shadow-lg mt-10 border\">\r\n \r\n  <div className='px-4 py-6'>\r\n    <div className=\"font-bold text-xl mb-2\">Write Your Question Here</div>\r\n    \r\n    <textarea value={this.state.quesbox} onChange={this.handleChange} className=\"shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline\" id=\"username\" required placeholder=\"Enter Your question Here ...\" rows=\"6\"/>\r\n    <button className=\"bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded mt-4\" onClick={()=>this.submitquestion()}>\r\n  Submit Question\r\n</button>\r\n  </div>\r\n  \r\n</div>\r\n</center></div>\r\n        </Layout>\r\n        \r\n    )\r\n};\r\n}\r\n\r\nexport default Query;"]},"metadata":{},"sourceType":"module"}