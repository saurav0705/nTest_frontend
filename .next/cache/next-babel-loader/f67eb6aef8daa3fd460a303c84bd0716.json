{"ast":null,"code":"var __jsx = React.createElement;\nimport React, { Component } from 'react';\nimport Layout from \"./Layout\";\nimport { urlOfImages } from \"../public/icons/assets/images\";\nimport fetch from 'isomorphic-fetch';\nimport Router from 'next/router';\nimport ls from 'local-storage';\n\nclass Query extends Component {\n  constructor() {\n    super();\n    this.state = {\n      questionList: [],\n      answers: [],\n      questionBox: false,\n      quesbox: '',\n      query: ''\n    };\n    this.handleChange = this.handleChange.bind(this);\n  }\n\n  handleChange(event) {\n    this.setState({\n      quesbox: event.target.value\n    });\n  }\n\n  async componentDidMount() {\n    await fetch('https://questionstack-266907.appspot.com//questions/').then(response => response.json()).then(res => {\n      this.setState({\n        questionList: [...res.questionList]\n      });\n    });\n  }\n\n  questionDetails(obj) {\n    localStorage.setItem('obj_id', obj);\n    Router.push('/questionWithAnswers');\n  }\n\n  renderQuestion() {\n    if (!this.state.questionList || this.state.questionList.length === 0) {\n      return __jsx(React.Fragment, null, __jsx(\"div\", {\n        className: \"text-4xl bg-red-500 text-white p-8 my-4 mx-4 rounded hover:bg-red-600\"\n      }, \"NOTHING FOUND\"));\n    }\n\n    return __jsx(React.Fragment, null, this.state.questionList.map(question => {\n      return __jsx(\"div\", {\n        key: question._id,\n        className: \"text-4xl bg-red-500 text-white p-8 my-4 mx-4 rounded hover:bg-red-600\",\n        onClick: () => this.questionDetails(question._id)\n      }, __jsx(\"b\", null, \"Q.\"), \"   \", question.question);\n    }));\n  }\n\n  logIn() {\n    return ls.get('loggedIn');\n  }\n\n  openQuestionDialog() {\n    this.setState({\n      questionBox: !this.state.questionBox\n    });\n  }\n\n  async submitquestion() {\n    //console.log(.*)$\n    //console.log(.*)$\n    const url = 'https://questionstack-266907.appspot.com//questions';\n\n    try {\n      const response = await fetch(url, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          \"Access-Control-Allow-Origin\": '*',\n          'Authorization': 'bearer ' + ls.get('token')\n        },\n        body: JSON.stringify({\n          question: this.state.quesbox\n        })\n      });\n\n      if (response.ok) {\n        const data = await response.json(); //console.log(.*)$\n        //console.log(.*)$\n\n        this.openQuestionDialog();\n        this.componentDidMount(); //   await this.setState({\n        //       user:data.user\n        //   })\n      } else {\n        alert('Log In to add question');\n        localStorage.setItem('token', '');\n        localStorage.setItem('loggedIn', false);\n        Router.push('/');\n      }\n    } catch (error) {\n      console.error('You have an error in your code or there are Network issues.', error);\n      throw new Error(error);\n    }\n  }\n\n  async test() {\n    if (ls.get('query') && ls.get('query').length > 0) {\n      //console.log(.*)$\n      await fetch('https://questionstack-266907.appspot.com//questions/search/' + ls.get('query')).then(response => response.json()).then(res => {\n        //console.log(.*)$\n        this.setState({\n          questionList: [...res.questionList]\n        });\n        localStorage.setItem('query', '');\n      });\n    } else {\n      return;\n    }\n  }\n\n  render() {\n    this.test();\n    return __jsx(Layout, null, __jsx(\"div\", {\n      className: this.state.questionBox ? 'hidden' : 'block'\n    }, __jsx(\"div\", {\n      className: \"flex overflow-hidden\"\n    }, __jsx(\"div\", {\n      className: \"fixed bottom-3 right-3 md:block  p-4 md:p-8 -ml-2\"\n    }, __jsx(\"div\", {\n      className: \" w-full bg-yellow-300 hover:bg-yellow-500 text-white font-bold  mt-10 p-2  rounded \",\n      onClick: () => {\n        this.openQuestionDialog();\n      }\n    }, __jsx(\"span\", {\n      className: \"text-2l md:text-2xl \"\n    }, \" Q\"))), __jsx(\"div\", {\n      className: \"block text-center  border-gray-600 w-screen \"\n    }, this.renderQuestion()))), __jsx(\"div\", {\n      className: this.state.questionBox ? 'block' : 'hidden'\n    }, __jsx(\"center\", null, __jsx(\"div\", {\n      className: \"max-w-sm rounded overflow-hidden shadow-lg mt-10 border\"\n    }, __jsx(\"div\", {\n      className: \"px-4 py-6\"\n    }, __jsx(\"div\", {\n      className: \"font-bold text-xl mb-2\"\n    }, \"Write Your Question Here\"), __jsx(\"textarea\", {\n      value: this.state.quesbox,\n      onChange: this.handleChange,\n      className: \"shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline\",\n      id: \"username\",\n      required: true,\n      placeholder: \"Enter Your question Here ...\",\n      rows: \"6\"\n    }), __jsx(\"button\", {\n      className: \"bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded mt-4\",\n      onClick: () => this.submitquestion()\n    }, \"Submit Question\"))))));\n  }\n\n}\n\nexport default Query;","map":null,"metadata":{},"sourceType":"module"}