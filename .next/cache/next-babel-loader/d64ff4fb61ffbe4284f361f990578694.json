{"ast":null,"code":"var __jsx = React.createElement;\nimport React, { Component } from 'react';\nimport Layout from \"./Layout\";\nimport { urlOfImages } from \"../public/icons/assets/images\";\nimport fetch from 'isomorphic-fetch';\nimport ls from 'local-storage';\nimport Router from 'next/router';\n\nclass QueryWithAns extends Component {\n  constructor() {\n    super();\n    this.state = {\n      question: {},\n      answers: [],\n      loggedIn: false,\n      objId: '',\n      form: false,\n      quesbox: ''\n    };\n    this.handleChange = this.handleChange.bind(this);\n  }\n\n  handleChange(event) {\n    this.setState({\n      quesbox: event.target.value\n    });\n  }\n\n  async componentDidMount() {\n    if (ls.get('loggedIn')) {\n      await this.setState({\n        'loggedIn': true\n      });\n    }\n\n    this.show();\n  }\n\n  async upvote(id) {\n    const url = 'https://questionstack-266907.appspot.com//answers/' + id + '/upvote';\n\n    try {\n      const response = await fetch(url, {\n        method: 'GET',\n        headers: {\n          'Content-Type': 'application/json',\n          \"Access-Control-Allow-Origin\": '*',\n          'Authorization': 'bearer ' + ls.get('token')\n        }\n      });\n\n      if (response.ok) {\n        const data = await response.json(); //console.log(.*)$\n        //console.log(.*)$\n\n        this.componentDidMount(); //   await this.setState({\n        //       user:data.user\n        //   })\n      } else {\n        alert('unable to fetch');\n      }\n    } catch (error) {\n      console.error('You have an error in your code or there are Network issues.', error);\n      throw new Error(error);\n    } //console.log(.*)$\n\n  }\n\n  async downvote(id) {\n    const url = 'https://questionstack-266907.appspot.com//answers/' + id + '/downvote';\n\n    try {\n      const response = await fetch(url, {\n        method: 'GET',\n        headers: {\n          'Content-Type': 'application/json',\n          \"Access-Control-Allow-Origin\": '*',\n          'Authorization': 'bearer ' + ls.get('token')\n        }\n      });\n\n      if (response.ok) {\n        const data = await response.json(); //console.log(.*)$\n        //console.log(.*)$\n\n        this.componentDidMount(); //   await this.setState({\n        //       user:data.user\n        //   })\n      } else {\n        alert('unable to fetch');\n      }\n    } catch (error) {\n      console.error('You have an error in your code or there are Network issues.', error);\n      throw new Error(error);\n    } //console.log(.*)$\n\n  }\n\n  async show() {\n    await fetch('https://questionstack-266907.appspot.com//questions/' + ls.get('obj_id')).then(response => response.json()).then(res => {\n      //console.log(.*)$\n      if (res.question) {\n        this.setState({\n          question: res.question\n        });\n\n        if (this.state.question.answers) {\n          this.setState({\n            answers: this.state.question.answers\n          });\n        }\n      }\n\n      this.setState({\n        'objId': ls.get('obj_id')\n      });\n    });\n  }\n\n  async submitanswer() {\n    //console.log(.*)$\n    const url = 'https://questionstack-266907.appspot.com//questions/' + this.state.objId + '/answer';\n\n    try {\n      const response = await fetch(url, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          \"Access-Control-Allow-Origin\": '*',\n          'Authorization': 'bearer ' + ls.get('token')\n        },\n        body: JSON.stringify({\n          answer: this.state.quesbox\n        })\n      });\n\n      if (response.ok) {\n        const data = await response.json(); //console.log(.*)$\n        //console.log(.*)$\n\n        this.toggleBox();\n        this.componentDidMount(); //   await this.setState({\n        //       user:data.user\n        //   })\n      } else {\n        alert('your Session expired');\n        localStorage.setItem('token', '');\n        localStorage.setItem('loggedIn', false);\n        Router.push('/');\n      }\n    } catch (error) {\n      console.error('You have an error in your code or there are Network issues.', error);\n      throw new Error(error);\n    }\n  }\n\n  renderAnswer() {\n    if (this.state.answers && this.state.answers.length > 0) {\n      return __jsx(\"div\", null, this.state.answers.map(answer => {\n        return __jsx(\"div\", {\n          key: answer._id,\n          className: \"flex justify-center bg-green-300 p-4 m-4\"\n        }, __jsx(\"div\", {\n          className: \"block md:flex justify-center w-full\"\n        }, __jsx(\"div\", null, __jsx(\"center\", null, __jsx(\"img\", {\n          src: urlOfImages.answer,\n          className: \"h-6 mt-5\"\n        }))), __jsx(\"div\", {\n          className: \"p-1 w-auto text-4m md:text-2xl\"\n        }, __jsx(\"span\", {\n          className: \"ml-2\"\n        }, answer.answer), __jsx(\"div\", {\n          className: \"text-right text-gray-500\"\n        }, \"-- \", answer.author.name)), __jsx(\"div\", {\n          className: this.state.loggedIn ? 'block p-6' : 'hidden p-6'\n        }, __jsx(\"button\", {\n          onClick: () => this.upvote(answer._id),\n          className: \"bg-green-500 hover:bg-green-700 w-full text-white p-2 px-4 mt-1 rounded mr-4\"\n        }, \"Upvote \", answer.upvote.length), __jsx(\"button\", {\n          onClick: () => this.downvote(answer._id),\n          className: \"bg-red-500 hover:bg-red-700 text-white w-full rounded px-4 p-2 mt-1 \"\n        }, \"Downvote \", answer.downvote.length))));\n      }));\n    } else {\n      return __jsx(\"div\", {\n        className: \"flex justify-center bg-green-300 p-4 m-4 text-2xl\"\n      }, \"NO ONE ANSWERED IT YET\");\n    }\n  }\n\n  toggleBox() {\n    this.setState({\n      form: !this.state.form\n    });\n  }\n\n  render() {\n    return __jsx(Layout, null, __jsx(\"div\", {\n      className: this.state.form ? 'hidden' : 'block'\n    }, __jsx(\"div\", {\n      className: \"flex overflow-hidden\"\n    }, __jsx(\"div\", {\n      className: this.state.loggedIn ? 'block' : 'hidden'\n    }, __jsx(\"div\", {\n      className: \"fixed top-10  left-3 md:relative md:w-1/6 p-6 -ml-6\"\n    }, __jsx(\"div\", {\n      onClick: () => this.toggleBox(),\n      className: \"bg-blue-500 hover:bg-blue-700 w-full text-white font-bold p-1 px-4 -ml-3 md:py-2 md:px-4 rounded m-1 md:m-4\"\n    }, __jsx(\"span\", {\n      className: \"w-full\"\n    }, \" A\")))), __jsx(\"div\", {\n      className: \"block text-center  border-gray-600 w-screen w-full\"\n    }, __jsx(\"center\", null, __jsx(\"div\", {\n      key: this.state.question._id,\n      className: \"text-2l md:text-4xl bg-red-500 text-white p-8 my-4 mx-4 rounded hover:bg-red-600\"\n    }, __jsx(\"b\", null, \"Q.\"), \"   \", this.state.question.question), __jsx(\"div\", {\n      className: \"text-2xl bg-green-500 p-8 text-white\"\n    }, \"Answers\", this.renderAnswer()))))), __jsx(\"div\", {\n      className: this.state.form ? 'block' : 'hidden'\n    }, __jsx(\"center\", null, __jsx(\"div\", {\n      className: \"max-w-sm rounded overflow-hidden shadow-lg mt-10 border\"\n    }, __jsx(\"div\", {\n      className: \"px-4 py-6\"\n    }, __jsx(\"div\", {\n      className: \"font-bold text-xl mb-2\"\n    }, \"Write Your Answer Here\"), __jsx(\"textarea\", {\n      value: this.state.quesbox,\n      onChange: this.handleChange,\n      className: \"shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline\",\n      id: \"username\",\n      required: true,\n      placeholder: \"Enter Your question Here ...\",\n      rows: \"6\"\n    }), __jsx(\"button\", {\n      className: \"bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded mt-4\",\n      onClick: () => this.submitanswer()\n    }, \"Submit Question\"))))));\n  }\n\n}\n\nexport default QueryWithAns;","map":null,"metadata":{},"sourceType":"module"}